<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:int="http://www.springframework.org/schema/integration"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://www.springframework.org/schema/beans"
             xmlns:jms="http://www.springframework.org/schema/integration/jms"
             xsi:schemaLocation="http://www.springframework.org/schema/beans		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/integration	http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd">

    <import resource="../contextConfigs/base-config.xml"/>
    <import resource="../contextConfigs/logging-config.xml"/>

    <!-- - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - - - - -  - -->
    <!-- DEPENDS ON SYSTEM-->


    <!-- Настройка используемой конфигурации заглушки-->

    <bean id="connectionFactoryString" class="java.lang.String">
        <constructor-arg value="jms/Q.PROMETHEUS.JUPITER-SA.CF"/>
    </bean>
    <bean id="connectionFactoryURLString" class="java.lang.String">
        <constructor-arg value="jms/Q.PROMETHEUS.JUPITER-REG.CF"/>
    </bean>
    <bean id="connectionFactoryCRMString" class="java.lang.String">
        <constructor-arg value="jms/ESB.PROMETHEUS.CRM.CF"/>
    </bean>

    <!-- - - - - - - -->
    <!--MOCK-->
    <bean id="mockConnectionInputString" class="java.lang.String">
        <constructor-arg value="jms/Q.PROMETHEUS.JUPITER-SA.IN"/>
    </bean>
    <bean id="mockConnectionOutputString" class="java.lang.String">
        <constructor-arg value="jms/Q.PROMETHEUS.JUPITER-SA.OUT"/>
    </bean>
    <bean id="mockConnectionInputURLString" class="java.lang.String">
        <constructor-arg value="jms/Q.PROMETHEUS.JUPITER-REG.IN"/>
    </bean>
    <bean id="mockConnectionOutputURLString" class="java.lang.String">
        <constructor-arg value="jms/Q.PROMETHEUS.JUPITER-REG.OUT"/>
    </bean>
    <bean id="mockConnectionInputCRMString" class="java.lang.String">
        <constructor-arg value="jms/ESB.PROMETHEUS.CRM.IN"/>
    </bean>
    <bean id="mockConnectionOutputCRMString" class="java.lang.String">
        <constructor-arg value="jms/ESB.PROMETHEUS.CRM.OUT"/>
    </bean>
    <!-- - - - - - - -->
    <!-- DRIVER -->
    <bean id="driverConnectionInputString" class="java.lang.String">
        <constructor-arg value="jms/Q.PROMETHEUS.JUPITER-REG.IN"/>
        <!--<beans:constructor-arg value="java:/comp/env/jms/Q.LEGAL.TO.CRMORG.SYNCRESP"/>-->
    </bean>
    <bean id="driverConnectionOutputString" class="java.lang.String">
        <constructor-arg value="jms/Q.PROMETHEUS.JUPITER-REG.OUT"/>
        <!--<beans:constructor-arg value="java:/comp/env/jms/Q.LEGAL.FROM.CRMORG"/>-->
    </bean>
    <bean id="driverConnectionInputCRMString" class="java.lang.String">
        <constructor-arg value="jms/ESB.PROMETHEUS.CRM.REQUEST"/>
        <!--<beans:constructor-arg value="java:/comp/env/jms/Q.LEGAL.TO.CRMORG.SYNCRESP"/>-->
    </bean>
    <bean id="driverConnectionOutputCRMString" class="java.lang.String">
        <constructor-arg value="jms/ESB.PROMETHEUS.CRM.RESPONSE"/>
        <!--<beans:constructor-arg value="java:/comp/env/jms/Q.LEGAL.FROM.CRMORG"/>-->
    </bean>

    <!-- - - - - - - - - - - - - - -->
    <!--                           -->
    <!-- ПРЕДВАРИТЕЛЬНАЯ НАСТРОЙКА -->
    <!--                           -->
    <!-- - - - - - - - - - - - - - -->

     <!--Настройки подключения к MQ-->
    <bean id = "jndiConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{connectionFactoryString}"/>

    </bean>
    <bean id = "jndiConnectionURLFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="#{connectionFactoryURLString}"/>
    </bean>
    <bean id = "jndiConnectionCRMFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="#{connectionFactoryCRMString}"/>
    </bean>

    <bean id="inboundMockQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{mockConnectionInputString}"/>
    </bean>
    <bean id="outboundMockQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{mockConnectionOutputString}"/>
    </bean>
    <bean id="inboundMockURLQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{mockConnectionInputURLString}"/>
    </bean>
    <bean id="outboundMockURLQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{mockConnectionOutputURLString}"/>
    </bean>
    <bean id="inboundMockCRMQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{mockConnectionInputCRMString}"/>
    </bean>
    <bean id="outboundMockCRMQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{mockConnectionOutputCRMString}"/>
    </bean>

     <bean id="requestDriverQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{driverConnectionOutputString}"/>
    </bean>
    <bean id="responseDriverQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{driverConnectionInputString}"/>
    </bean>

     <bean id="requestDriverCRMQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{driverConnectionOutputCRMString}"/>
    </bean>
    <bean id="responseDriverCRMQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
            <property name="jndiName" value="#{driverConnectionInputCRMString}"/>
    </bean>

    <jms:inbound-gateway
            request-destination="inboundMockQueue"
            request-channel="MockInboundRequest"
            reply-channel="MockOutboundResponse"
            default-reply-destination="outboundMockQueue"
            connection-factory="jndiConnectionFactory"
    />

    <jms:inbound-gateway
            request-destination="inboundMockURLQueue"
            request-channel="MockInboundURLRequest"
            reply-channel="MockOutboundURLResponse"
            default-reply-destination="outboundMockURLQueue"
            connection-factory="jndiConnectionURLFactory"
    />

    <jms:inbound-gateway
            request-destination="inboundMockCRMQueue"
            request-channel="MockInboundCRMRequest"
            reply-channel="MockOutboundCRMResponse"
            default-reply-destination="outboundMockCRMQueue"
            connection-factory="jndiConnectionCRMFactory"
    />

    <jms:outbound-gateway
            id="jmsout"
            request-destination="requestDriverQueue"
            reply-destination="responseDriverQueue"
            request-channel="DriverOutboundRequest"
            reply-channel="DriverInboundResponse"
            header-mapper="defHeaderMapper"
            connection-factory="jndiConnectionFactory"
            reply-timeout="30000"
            receive-timeout="30000"
    />

    <jms:outbound-gateway
            id="jmsCRMout"
            request-destination="requestDriverCRMQueue"
            reply-destination="responseDriverCRMQueue"
            request-channel="DriverOutboundCRMRequest"
            reply-channel="DriverInboundCRMResponse"
            header-mapper="defHeaderMapper"
            connection-factory="jndiConnectionCRMFactory"
            reply-timeout="30000"
            receive-timeout="30000"
    />


    <!-- Входной и выходной каналы Заглушки-->
    <int:channel id="MockInboundRequest"/>
    <int:channel id="MockInboundURLRequest"/>
    <int:channel id="MockInboundCRMRequest"/>

    <int:channel id="MockOutboundResponse"/>

    <int:channel id="MockOutboundURLResponse"/>
    <int:channel id="MockOutboundCRMResponse"/>

      <!-- Входной и выходной каналы Драйвера -->

    <int:channel id="DriverOutboundRequest"/>
    <int:channel id="DriverOutboundCRMRequest"/>

    <int:channel id="DriverInboundResponse"/>
    <int:channel id="DriverInboundCRMResponse"/>

    <!-- external logging -->

    <!--<int:channel id="MockInboundRequestExternalLogger"/>-->
    <!--<int:channel id="MockOutboundResponseExternalLogger"/>-->
    <!--<int:channel id="DriverOutboundRequestExternalLogger"/>-->
    <!--<int:channel id="DriverInboundResponseExternalLogger"/>-->


    <!--<int:service-activator id="MockInboundRequestExternalLoggerActivator"-->
                           <!--input-channel="MockInboundRequestExternalLogger"-->
                           <!--expression="@messageLogger.logMessage(payload, #{mockConnectionInputString})"/>-->
    <!--<int:service-activator id="MockOutboundResponseExternalLoggerActivator"-->
                           <!--input-channel="MockOutboundResponseExternalLogger"-->
                           <!--expression="@messageLogger.logMessage(payload, #{mockConnectionOutputString})"/>-->
    <!--<int:service-activator id="DriverOutboundRequestExternalLoggerActivator"-->
                       <!--input-channel="DriverOutboundRequestExternalLogger"-->
                       <!--expression="@messageLogger.logMessage(payload, #{driverConnectionOutputString})"/>-->
    <!--<int:service-activator id="DriverInboundResponseExternalLoggerActivator"-->
                       <!--input-channel="DriverInboundResponseExternalLogger"-->
                       <!--expression="@messageLogger.logMessage(payload, #{driverConnectionInputString})"/>-->

    <!-- - - - - - - - - - - - -->
    <!--     МАРШРУТИЗАЦИЯ     -->
    <!-- - - - - - - - - - - - -->

    <!-- Генерация ответа -->
    <int:service-activator input-channel="MockInboundRequest" output-channel="MockOutboundResponse" expression="@responseGenerator.routeAndGenerate(payload, '#{mockConnectionInputString}')"/>
    <int:service-activator input-channel="MockInboundURLRequest" output-channel="MockOutboundURLResponse" expression="@responseGenerator.routeAndGenerate(payload, '#{mockConnectionInputURLString}')"/>
    <int:service-activator input-channel="MockInboundCRMRequest" output-channel="MockOutboundCRMResponse" expression="@responseGenerator.routeAndGenerate(payload, '#{mockConnectionInputCRMString}')"/>



    <!-- Mock gateway to send requests to outbound -->
    <int:gateway id="systemEntry"
             error-channel="MockOutboundResponse"
             service-interface="ru.sbt.bpm.mock.spring.integration.gateway.ClientService"
             default-reply-timeout="30000"
             default-request-timeout="30000"
        >
        <int:method name="send" request-channel="MockInboundRequest" reply-channel="MockOutboundResponse"/>
        <int:method name="sendURL" request-channel="MockInboundURLRequest" reply-channel="MockOutboundURLResponse"/>
        <int:method name="sendCRM" request-channel="MockInboundCRMRequest" reply-channel="MockOutboundCRMResponse"/>
    </int:gateway>

</beans>